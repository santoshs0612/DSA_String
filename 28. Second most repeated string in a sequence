Given a sequence of strings, the task is to find out the second most repeated (or frequent) string in the given sequence.

Note: No two strings are the second most repeated, there will be always a single string.

Example 1:

Input:
N = 6
arr[] = {aaa, bbb, ccc, bbb, aaa, aaa}
Output: bbb
Explanation: "bbb" is the second most 
occurring string with frequency 2.

â€‹Example 2:

Input: 
N = 6
arr[] = {geek, for, geek, for, geek, aaa}
Output: for
Explanation: "for" is the second most
occurring string with frequency 2.


class Solution
{
  public:
    string secFrequent (string arr[], int n)
    {
        //code here.
        // unordered_map<string ,int> mp;
        // for(int i=0;i<n;i++)
        // {
        //     mp[arr[i]]++;
        // }
        // int max_1=INT_MIN;
        // string temp="";
        
        // for(auto i= mp.begin();i!=mp.end();i++)
        // {
        //     if(i->second>max_1)
        //     {
        //         max_1=i->second;
        //         temp=i->first;
        //     }
        // }
        // mp.erase(temp);
        // max_1=INT_MIN;
        // temp="";
        // for(auto i= mp.begin();i!=mp.end();i++)
        // {
        //     if(i->second>max_1)
        //     {
        //         max_1=i->second;
        //         temp=i->first;
        //     }
        // }       
        // return temp;
        
        unordered_map<string, int> mp;
        
        for(int i=0;i<n;i++)
        {
            mp[arr[i]]++;
        }
        
        int first_rep=INT_MIN,second_rep=INT_MIN;
        string key="";
        int val=0;
        for(auto i = mp.begin();i!=mp.end();i++)
        {
            
            key= i->first;
            val=i->second;
            if(val>first_rep)
            {
                second_rep=first_rep;
                first_rep=val;
            }
            else if(val>second_rep && first_rep>val)
            {
                second_rep=val;
            }
        }
        for(auto i = mp.begin();i!=mp.end();i++)
        {
            
            key= i->first;
            val=i->second;
            if(mp[key]==second_rep)
            {
                return key;
            }
        }
        return "";
      
        
    }
};
