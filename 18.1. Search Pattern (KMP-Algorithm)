Given two strings, one is a text string, txt and other is a pattern string, pat. The task is to print the indexes of all the occurences of pattern string in the text string. For printing, Starting Index of a string should be taken as 1.


Example 1:

Input:
txt = "batmanandrobinarebat", pat = "bat"
Output: 1 18
Explanation: The string "bat" occurs twice
in txt, one starts are index 1 and the other
at index 18. 
Example 2:

Input: 
txt = "abesdu", pat = "edu"
Output: -1
Explanation: There's not substring "edu"
present in txt.







{
    public:
        void find_lps(string pat,vector<int> &lps)
        {
            
            int n=pat.length();
            int i=0,j=1;
            lps.push_back(0);
            while(j<n)
            {
                if(pat[i]==pat[j])
                {
                    lps.push_back(i+1);
                    i++;
                    j++;
                }
                else 
                {
                    if(i==0)
                    {
                        lps.push_back(0);
                        j++;
                    }
                    else 
                    {
                        i= lps[i-1];
                    }
                }
            }
        }
        vector <int> search(string pat, string txt)
        {
            //code hee.
            //// finding the LPS array
            vector<int> lps,ans;
            find_lps(pat,lps);
            
            // for(int i=0;i<lps.size();i++)
            // {
            //     cout<<lps[i]<<" ";
            // }
            int n = txt.size();
            int m=  pat.size();
            int i=0,j=0;
            while(i<n)
            {
                if(pat[j]==txt[i])
                {
                    i++;
                    j++;
                }
                
                if(j==m)
                {
                    ans.push_back(i-j+1);
                    j= lps[j-1];
                }
                
                else if(i<n && pat[j]!=txt[i])
                {
                    if(j==0)
                    {
                        i++;
                    }
                    else 
                    {
                        j= lps[j-1];
                    }
                }
            }
            return ans;
            
            
        }
     
};
