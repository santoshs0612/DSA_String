Given two strings s1 and s2. The task is to check if s2 is a rotated version of the string s1. The characters in the strings are in lowercase.

 

Example 1:

Input:
geeksforgeeks
forgeeksgeeks
Output: 
1
Explanation: s1 is geeksforgeeks, s2 is
forgeeksgeeks. Clearly, s2 is a rotated
version of s1 as s2 can be obtained by
left-rotating s1 by 5 units.
 

Example 2:

Input:
mightandmagic
andmagicmigth
Output: 
0
Explanation: Here with any amount of
rotation s2 can't be obtained by s1.



class Solution
{
    public:
    //Function to check if two strings are rotations of each other or not.
    bool areRotations(string s1,string s2)
    {
        // Your code here
        // With stl
        // int n=s1.length();
        // int m=s2.length();
        // if(n!=m)
        // {
        //     return false;
        // }
        
        // string str=s1+s1;
        
        // if(str.find(s2)!=-1)
        // {
        //     return true;
        // }
        // else 
        // {
        //     return false;
        // }
        
        // with normal compare 
        
        int n1= s1.length();
        int n2=s2.length();
        if(n1!=n2)
        {
            return 0;
        }
        for(int i=0;i<n1;i++)
        {
            string temp_str="";
            temp_str=s1[n1-1];
            s1.pop_back();
            temp_str+=s1;
            s1=temp_str;
            if(temp_str==s2)
            {
                return 1;
            }
            
        }
        return 0;
    }
};
