Given an expression string x. Examine whether the pairs and the orders of “{“,”}”,”(“,”)”,”[“,”]” are correct in exp.
For example, the function should return 'true' for exp = “[()]{}{[()()]()}” and 'false' for exp = “[(])”.

Example 1:

Input:
{([])}
Output: 
true
Explanation: 
{ ( [ ] ) }. Same colored brackets can form 
balaced pairs, with 0 number of 
unbalanced bracket.
Example 2:

Input: 
()
Output: 
true
Explanation: 
(). Same bracket can form balanced pairs, 
and here only 1 type of bracket is 
present and in balanced way.
Example 3:

Input: 
([]
Output: 
false
Explanation: 
([]. Here square bracket is balanced but 
the small bracket is not balanced and 
Hence , the output will be unbalanced.




class Solution
{
    public:
    //Function to check if brackets are balanced or not.
    bool ispar(string x)
    {
        // Your code here
        
        
        stack<int> parin;
        int n = x.length();
        int i{0};
        if(n==1)
        {
            return false;
        }
        while(i<n)
        {
            if(x[i]=='('|| x[i]=='{'|| x[i]=='[')
            {
                parin.push(x[i]);
                i++;
            }
            else if(x[i]==')'&& parin.size()!=0)
            {
                if(parin.top()=='(')
                {
                    parin.pop();
                    i++;
                    continue;
                }
                else return false;
            }
            else if(x[i]=='}'&& parin.size()!=0)
            {
                if(parin.top()=='{')
                {
                    parin.pop();
                    i++;
                    continue;
                }
                else return false;
            }
            else if(x[i]==']'&& parin.size()!=0)
            {
                if(parin.top()=='[')
                {
                    parin.pop();
                    i++;
                    continue;
                }
                else return false;
            }
            else return false;
        }
        
    if(parin.empty())
    {
        return true;
    }
    else return false;
    }

};
