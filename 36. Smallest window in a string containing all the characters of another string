Given two strings S and P. Find the smallest window in the string S consisting of all the characters(including duplicates) of the string P.  Return "-1" in case there is no such window present. In case there are multiple such windows of same length, return the one with the least starting index. 

Example 1:

Input:
S = "timetopractice"
P = "toc"
Output: 
toprac
Explanation: "toprac" is the smallest
substring in which "toc" can be found.
Example 2:

Input:
S = "zoomlazapzo"
P = "oza"
Output: 
apzo
Explanation: "apzo" is the smallest 
substring in which "oza" can be found.



class Solution
{
    public:
    //Function to find the smallest window in the string s consisting
    //of all the characters of string p.
    string smallestWindow (string s, string p)
    {
        // Your code here
        int n=s.length();
        int m=p.length();
        
        // map for storing 2nd string 
        unordered_map<char,int> mp;
        // iterating for storing the string into map
        for(int i=0;i<m;i++)
        {
            mp[p[i]]++;
        }
        // size of map
        int count=mp.size();
        // variables 
        int i=0,j=0,ind_end=n,ind_start=0,ans=INT_MAX;
        // applting the main algo 
        while(j<n)
        {
            
            // if current char is mathed in the map then decrease the count 
            if(mp.find(s[j])!=mp.end() && count!=0)
            {
                mp[s[j]]--;
                // if map char is zero decrease the count means size of map 
                if(mp[s[j]]==0)
                {
                    count--;
                }
            }
            // if count is zero then do the operations 
            if(count==0)
            {
                // if current window is less then ans then do operations 
                if(ans>(j-i+1))
                {
                    ind_start=i;
                    ind_end=j;
                    ans=min(ans,(j-i+1));
                }
                
                // now try to reduce the current window 
                while(count==0)
                {
                    
                    if(mp.find(s[i])!=mp.end() && mp[s[i]]<0)
                    {
                        mp[s[i]]++;
                    }
                    else if(mp.find(s[i])!=mp.end() && mp[s[i]]==0)
                    {
                        mp[s[i]]++;
                        count++;
                        if(ans>(j-i+1))
                        {
                            ind_start=i;
                            ind_end=j;
                            ans=min(ans,(j-i+1));
                        }
                    }
                    i++;
                }
                
            }
            j++;
        }
        // extracting out the string from start point to ens point  
        string  res="";
        for(int k=ind_start;k<=ind_end;k++)
        {
            res+=s[k];
        }
        if(ind_end-ind_start==n)
        {
            return "-1";
        }
        return res;
        
    }
};
