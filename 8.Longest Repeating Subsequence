Given string str, find the length of the longest repeating subsequence such that it can be found twice in the given string.

The two identified subsequences A and B can use the same ith character from string str if and only if that ith character has different indices in A and B. For example, A = "xax" and B = "xax" then the index of first "x" must be different in the original string for A and B.

Example 1:

Input:
str = "axxzxy"
Output: 2
Explanation:
The given array with indexes looks like
a x x z x y 
0 1 2 3 4 5

The longest subsequence is "xx". 
It appears twice as explained below.

subsequence A
x x
0 1  <-- index of subsequence A
------
1 2  <-- index of str 


subsequence B
x x
0 1  <-- index of subsequence B
------
2 4  <-- index of str 

We are able to use character 'x' 
(at index 2 in str) in both subsequences
as it appears on index 1 in subsequence A 
and index 0 in subsequence B.
Example 2:

Input:
str = "axxxy"
Output: 2
Explanation:
The given array with indexes looks like
a x x x y 
0 1 2 3 4
















	public:
	    int solver_Rec(string str1,string str2,int n,int m)
	    {
	        if(n==0|| m==0)
	        {
	            return 0;
	        }
	        if(str2[n-1]==str2[m-1] && (m-1)!=(n-1))
	        {
	            return solver_Rec(str1,str2,n-1,m-1)+1;
	        }
	        else{
	            return max(solver_Rec(str1,str2,n,m-1),solver_Rec(str1,str2,n-1,m));
	        }
	    }
	    int solver_Mem(string str1,string str2,int n,int m,vector<vector<int>> &dp)
	    {
	        if(dp[n][m]!=-1)
	        {
	            return dp[n][m];
	        }
	        if(n==0|| m==0)
	        {
	            return dp[n][m]=0;
	        }

	        if(str2[n-1]==str2[m-1] && (m-1)!=(n-1))
	        {
	            return dp[n][m]=solver_Mem(str1,str2,n-1,m-1,dp)+1;
	        }
	        else{
	            return dp[n][m]=max(solver_Mem(str1,str2,n,m-1,dp),solver_Mem(str1,str2,n-1,m,dp));
	        }
	    }
		int LongestRepeatingSubsequence(string str){
		  //  // Code here
		  
		  
		  //////////////////////
		  // Recursion 
		  /////////////////////
		   // string str2=str;
		    
		    //return solver_Rec(str,str2,str.length(),str.length());
		    
		  /////////////////////
		  // Memorization 
		  /////////////////////
		  //int n=str.length();
		  //vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
		  //return solver_Mem(str,str,n,n,dp);
		  
		  
		  ///////////////////////
		  // Top Down 
		  ///////////////////////
		  //  int n=str.length();
		  //  vector<vector<int>> dp(n+1,vector<int>(n+1));
		  //  for(int i=0;i<n+1;i++)
		  //  {
		  //      for(int j=0;j<n+1;j++)
		  //      {
		  //          if(i==0||j==0)
		  //          {
		  //              dp[i][j]=0;
		  //          }
		  //      }
		  //  }
		    
		    
		  //  for(int i=1;i<n+1;i++)
		  //  {
		  //      for(int j=1;j<n+1;j++)
		  //      {
		  //          if(str[i-1]==str[j-1] && i!=j)
		  //          {
		  //              dp[i][j]= 1+dp[i-1][j-1];
		  //          }
		  //          else 
		  //          {
		  //              dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
		  //          }
		  //      }
		  //  }
		  //  return dp[n][n];
		  
          //////////////////////////////
          // Bottom Up( Space Optimization)
          
		    int n=str.length();
		    //vector<vector<int>> dp(n+1,vector<int>(n+1));
		    vector<int> prev(n+1,0),curr(n+1,0);
		    
		    for(int i=1;i<n+1;i++)
		    {
		        for(int j=1;j<n+1;j++)
		        {
		            if(str[i-1]==str[j-1] && i-1!=j-1)
		            {
		                curr[j]= 1+prev[j-1];
		            }
		            else 
		            {
		                curr[j]= max(prev[j],curr[j-1]);
		            }
		        }
		        prev= curr;
		    }
		    return prev[n];
		}

};
