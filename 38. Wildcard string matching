
Given two strings wild and pattern where wild string may contain wild card characters and pattern string is a normal string. Determine if the two strings match. The following are the allowed wild card characters in first string :-

* --> This character in string wild can be replaced by any sequence of characters, it can also be replaced by an empty string.
? --> This character in string wild can be replaced by any one character.
Example 1:

Input: wild = ge*ks
       pattern = geeks
Output: Yes
Explanation: Replace the '*' in wild string 
with 'e' to obtain pattern "geeks".
Example 2:

Input: wild = ge?ks*
       pattern = geeksforgeeks
Output: Yes
Explanation: Replace '?' and '*' in wild string with
'e' and 'forgeeks' respectively to obtain pattern 
"geeksforgeeks"







// User function template for C++
class Solution{
    public:
    
    bool solver_Rec(int i,int j, string wild,string pattern)
    {
        if(i<0 && j<0)
        {
            return true;
        }
        if(i<0 && j>=0)
        {
            return false;
        }
        if(j<0 && i>=0)
        {
            
            for(int ii=0;ii<i;ii++)
            {
            if(wild[ii]!='*')
            {
                return false;
            }
            return true;
            }
        }
        
        if(wild[i]==pattern[j] || wild[i]=='?')
        {
            return solver_Rec(i-1,j-1,wild,pattern);
        }
        
        if( wild[i]=='*')
        {
            return solver_Rec(i-1,j,wild,pattern)
                    || solver_Rec(i,j-1,wild,pattern);
        }
        return false;
    }
    bool solver_Mem(int i,int j, string wild,string pattern,vector<vector<int>> &dp)
    {
        if(i<0 && j<0)
        {
            return true;
        }
        if(i<0 && j>=0)
        {
            return false;
        }
        if(j<0 && i>=0)
        {
            
            for(int ii=0;ii<i;ii++)
            {
                if(wild[ii]!='*')
                {
                    return false;
                }
            return true;
            }
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        if(wild[i]==pattern[j] || wild[i]=='?')
            {
                return dp[i][j]=solver_Mem(i-1,j-1,wild,pattern,dp);
            }
        
        if( wild[i]=='*')
            {
                return dp[i][j]=solver_Mem(i-1,j,wild,pattern,dp)
                        || solver_Mem(i,j-1,wild,pattern,dp);
            }
        return dp[i][j]=false;
    }
    bool match(string wild, string pattern)
    {
        // code here
        int n= wild.length();
        int m= pattern.length();
        
        // Recurssion 
         //return solver_Rec(n-1,m-1,wild,pattern);
        
        // Memorization 
        
        //vector<vector<int>> dp(n,vector<int>(m,-1));
        // return solver_Mem(n-1,m-1,wild,pattern,dp);
        
        // Tabulation 
        
        // vector<vector<bool>> dp(n+1,vector<bool>(m+1,false));
        
        // dp[0][0]=true;
        
        
        // for(int j=1;j<=m;j++)
        // {
        //     dp[0][j]=false;
        // }
        // for(int i=1;i<=n;i++)
        // {
        //     bool flag=true;
        //     for(int j=1;j<=i;j++)
        //     {
        //         if(wild[j-1]!='*')
        //         {
        //             flag=false;
        //             break;
        //         }
        //     }
        //     dp[i][0]=flag;
        // }
        // for(int i=1;i<=n;i++)
        // {
        //     for(int j=1;j<=m;j++)
        //     {
        //         if(wild[i-1]==pattern[j-1] || wild[i-1]=='?')
        //         {
        //             dp[i][j]=dp[i-1][j-1];
        //         }
                
        //         else if( wild[i-1]=='*')
        //         {
        //              dp[i][j]=dp[i-1][j]|| dp[i][j-1];
        //         }
        //         else
        //         {
        //             dp[i][j]=false;
        //         }
        //     }
        // }
        
        // return dp[n][m];
        
        // Tabulation  memory Optimized 
        vector<bool> prev(m+1,false), cur(m+1,false);
        
        
        prev[0]=true;
        
        
        for(int j=1;j<=m;j++)
        {
            prev[j]=false;
        }
        
        for(int i=1;i<=n;i++)
        {
            bool flag=true;
            for(int j=1;j<=i;j++)
            {
                if(wild[j-1]!='*')
                {
                    flag=false;
                    break;
                }
            }
            
            cur[0]= flag;
            for(int j=1;j<=m;j++)
            {
                if(wild[i-1]==pattern[j-1] || wild[i-1]=='?')
                {
                    cur[j]=prev[j-1];
                }
                
                else if( wild[i-1]=='*')
                {
                     cur[j]=prev[j]|| cur[j-1];
                }
                else
                {
                    cur[j]=false;
                }
            }
            
            prev=cur;
        }
        
        return prev[m];
        

        
        
    }
};
