Given an array of strings, return all groups of strings that are anagrams. The groups must be created in order of their appearance in the original array. Look at the sample case for clarification.

Note: The final output will be in lexicographic order.


Example 1:

Input:
N = 5
words[] = {act,god,cat,dog,tac}
Output:
act cat tac 
god dog
Explanation:
There are 2 groups of
anagrams "god", "dog" make group 1.
"act", "cat", "tac" make group 2.
Example 2:

Input:
N = 3
words[] = {no,on,is}
Output: 
is
no on
Explanation:
There are 2 groups of
anagrams "is" makes group 1.
"no", "on" make group 2.


//User function Template for C++

class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& string_list) {
        //code here
        
        vector<vector<string> > ans;
        
        int n= string_list.size();
        vector<pair<string,int>> p;
        vector<string> temp;
        // making a temporary Pair for itermediate state
        for(int i=0;i<n;i++)
        {
            p.push_back({string_list[i],i});
        }
        
        // sorting the each string  from pair
        
        for(int i=0;i<n;i++)
        {
            sort(p[i].first.begin(),p[i].first.end());
        }
        sort(p.begin(),p.end());
        
        // for(int i=0;i<n;i++)
        // {
        //     cout<<p[i].first<<" "<<p[i].second<<endl;
        // }
        
        for(int i=0;i<n;i++)
        {
            if(p[i].first==p[i+1].first)
            {
                temp.push_back(string_list[p[i].second]);
            }
            else 
            {
                temp.push_back(string_list[p[i].second]);
                ans.push_back(temp);
                temp.clear();
            }
        }
        return ans;
        
    }
};
