
Given a string str of length N, you have to find number of palindromic subsequence (need not necessarily be distinct) present in the string str.
Note: You have to return the answer module 109+7;
 

Example 1:

Input: 
Str = "abcd"
Output: 
4
Explanation:
palindromic subsequence are : "a" ,"b", "c" ,"d"
 

Example 2:

Input: 
Str = "aab"
Output: 
4
Explanation:
palindromic subsequence are :"a", "a", "b", "aa"











    public:
    /*You are required to complete below method */
    typedef long long int lli;
    lli MOD=1000000007;
    lli solver(string str,lli i,lli j,vector<vector<lli>> &dp)
    {
        if(i>j)
        {
            return 0;
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        if(i==j)
        {
            return dp[i][j]=1;
        }
        else if(str[i]==str[j])
        {
           return dp[i][j]= solver(str,i+1,j,dp)+solver(str,i,j-1,dp)+1;
        }
        else 
        {
            return dp[i][j]=solver(str,i+1,j,dp)+solver(str,i,j-1,dp)-solver(str,i+1,j-1,dp);
        }
    }
    long long int  countPS(string str)
    {
       //Your code here
       lli n= str.length();
       vector<vector<lli>> dp(n+1,vector<lli>(n+1,0));
       //return solver(str,0,n-1,dp);
       for(int i=0;i<n+1;i++)
       {
           dp[i][i]=1;
       }
       
       for(int i=2;i<n+1;i++)
       {
           for(int j=0;j<n-i+1;j++)
           {
               int k= i+j-1;
               if(str[j]==str[k])
               {
                   dp[j][k]=((dp[j+1][k])%MOD+(dp[j][k-1])%MOD+1)%MOD;
               }
               else 
               {
                   dp[j][k]=((dp[j+1][k])%MOD+(dp[j][k-1])%MOD-(dp[j+1][k-1])%MOD+MOD)%MOD;
               }
           }
       }
       return (dp[0][n-1])%MOD;
       
    }
     
};
