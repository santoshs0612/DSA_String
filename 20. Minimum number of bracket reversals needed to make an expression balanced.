
Given a string S consisting of only opening and closing curly brackets '{' and '}', find out the minimum number of reversals required to convert the string into a balanced expression.
A reversal means changing '{' to '}' or vice-versa.

Example 1:

Input:
S = "}{{}}{{{"
Output: 3
Explanation: One way to balance is:
"{{{}}{}}". There is no balanced sequence
that can be formed in lesser reversals.
â€‹Example 2:

Input: 
S = "{{}{{{}{{}}{{"
Output: -1
Explanation: There's no way we can balance
this sequence of braces.







int countRev (string s)
{
    // your code here
// O(N) +O(N)
    stack<char> st;
    int reversal=0;
    int n=s.length();
    if(n%2)
    {
        return -1;
    }
    for(int i=0;i<n;i++)
    {
        
        if(s[i]=='}' && !st.empty())
        {
            if(st.top()=='{')
            {
                st.pop();
            }
            else 
            {
                st.push(s[i]);
            }
        }
        else
        {
            st.push(s[i]);
        }
    }
    
    int open=0,closed=0;
    
    while(!st.empty())
    {
        if(st.top()=='{')
        {
            open++;
        }
        else 
        {
            closed++;
        }
        st.pop();
    
    }
    return (open+1)/2+ (closed+1)/2;
    // O(N)+O(1)
    // int left=0,right=0;
    // int n=s.length();
    // if(n%2)
    // {
    //     return -1;
    // }
    // for(int i=0;i<n;i++)
    // {
        
    //     if(s[i]=='{')
    //     {
    //         left++;
    //     }
    //     else
    //     {
    //         if(left!=0)
    //         {
    //             left--;
    //         }
    //         else 
    //         {
    //             right++;
    //         }
    //     }
    // }
    
    // int ans = (left+1)/2+(right+1)/2;
    // return ans;
    
    // return (nes_size/2+ reversal%2);
    
    
    
}
