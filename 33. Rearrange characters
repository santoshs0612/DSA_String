Given a string S with repeated characters. The task is to rearrange characters in a string such that no two adjacent characters are the same.
Note: The string has only lowercase English alphabets and it can have multiple solutions. Return any one of them.

Example 1:

Input : str = "geeksforgeeks"
Output: 1
Explanation: All the repeated characters of the
given string can be rearranged so that no 
adjacent characters in the string is equal.
Any correct rearrangement will show a output
of 1.
Example 2:

Input : str = "bbbbb"
Output: 0
Explanation: Repeated characters in the string
cannot be rearranged such that there should not
be any adjacent repeated character.



class Solution
{
    public:
    char max_count(vector<int> &count)
    {
        int max=0;
        char ch;
        for(int i=0;i<26;i++)
        {
            if(count[i]>max)
            {
                max=count[i];
                ch='a'+i;
            }
        }
        return ch;
    }
    struct comp{
      bool operator()(const pair<int,char> &a,const pair<int,char> &b)
      {
          return a.first<b.first;
      }
    };
    string rearrangeString(string str)
    {
        //code here
// <Method -1 Without Heap;
        // int n = str.length();
        // string ans1;
        // if(!n)
        // {
        //     return "-1";
        // }
        
        // vector<int> count(26,0);
        
        // for(auto c:str)
        // {
        //     count[c-'a']++;
        // }
        // char c= max_count(count);
        
        // int max_char= count[c-'a'];
        
        // if(max_char>(n+1)/2)
        // {
        //     //cout<<max_char;
        //     return "-1";
        // }
        // int id=0;
        // string ans(n,' ');
        // while(max_char)
        // {
        //     ans[id]= c;
        //     id+=2;
        //     max_char--;
        // }
        // count[c-'a']=0;
        // for(int i=0;i<26;i++){
        //     while(count[i]>0)
        //     {
        //         id=(id>=n)?1:id;
        //         ans[id]= 'a'+i;
        //         id+=2;
        //         count[i]--;
        //     }
        // }
        // return ans;
        
        
        int n = str.length();
        unordered_map<char,int> count;
        for(auto &e:str)
        {
            count[e]++;
        }
        
        priority_queue<pair<int,char>,vector<pair<int,char>>, comp> maxHeap;

        for(auto &e: count)
        {
 
                maxHeap.push({e.second,e.first});
        }
        string ans ="";
        auto block = maxHeap.top();
        maxHeap.pop();
        ans+=block.second;
        block.first--;
        while(maxHeap.size()>0)
        {
            pair<int ,char> temp= maxHeap.top();
            maxHeap.pop();
            ans+=temp.second;
            temp.first--;
            if(block.first!=0)
            {
                maxHeap.push(block);
            }
            block= temp;
            
        }
        if(block.first>0)
        {
            return "-1";
        }
        return ans;
        
    }
    
    
};
