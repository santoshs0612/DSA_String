Given two strings 'str1' and 'str2', check if these two strings are isomorphic to each other.
Two strings str1 and str2 are called isomorphic if there is a one to one mapping possible for every character of str1 to every character of str2 while preserving the order.
Note: All occurrences of every character in str1 should map to the same character in str2

Example 1:

Input:
str1 = aab
str2 = xxy
Output: 1
Explanation: There are two different
charactersin aab and xxy, i.e a and b
with frequency 2and 1 respectively.
Example 2:

Input:
str1 = aab
str2 = xyz
Output: 0
Explanation: There are two different
charactersin aab but there are three
different charactersin xyz. So there
won't be one to one mapping between
str1 and str2.


class Solution
{
    public:
    //Function to check if two strings are isomorphic.
    bool areIsomorphic(string str1, string str2)
    {
        
        // Your code here
        
        int n=str1.length();
        int m=str2.length();
        if(n!=m) return false;
        unordered_map<char,char> mp;
        unordered_map<char,bool> np;
        for(int i=0;i<n;i++)
        {
            char c1=str1[i];
            char c2=str2[i];
            if(mp.find(c1)!=mp.end())
            {
                if(mp[c1]!=c2)
                {
                    return false;
                }
            }
            else if(np.find(c2)!=np.end())
            {
                return false;
            }
            else 
            {
                mp[c1]=c2;
                np[c2]=true;
            }
            
        }
        return true;
        
    }
};
