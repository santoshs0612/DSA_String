Given a 2D grid of n*m of characters and a word, find all occurrences of given word in grid. A word can be matched in all 8 directions at any point. Word is said to be found in a direction if all characters match in this direction (not in zig-zag form). The 8 directions are, horizontally left, horizontally right, vertically up, vertically down, and 4 diagonal directions.

Note: The returning list should be lexicographically smallest. If the word can be found in multiple directions starting from the same coordinates, the list should contain the coordinates only once. 
 

Example 1:

Input: grid = {{a,b,c},{d,r,f},{g,h,i}},
word = "abc"
Output: {{0,0}}
Explanation: From (0,0) one can find "abc"
in horizontally right direction.
Example 2:

Input: grid = {{a,b,a,b},{a,b,e,b},{e,b,e,b}}
,word = "abe"
Output: {{0,0},{0,2},{1,0}}
Explanation: From (0,0) one can find "abe" in 
right-down diagonal. From (0,2) one can
find "abe" in left-down diagonal. From
(1,0) one can find "abe" in Horizontally right 
direction.



class Solution {
public:


bool solver(string word,int word_size,int i,int j,vector<vector<char>> &grid,int row,int col,int ind,int dir_r,int dir_c)
{
    if(ind==word_size)
    {
        return true;
    }
    if(i<0 or i>row or j<0 or j>col)
    {
        return false;
    }
    if(grid[i][j]==word[ind])
    {
        return solver(word,word_size,i+dir_r,j+dir_c,grid,row,col,ind+1,dir_r,dir_c);;
    }
     
     return false;   
    
    
}
	vector<vector<int>>searchWord(vector<vector<char>>grid, string word){
	    // Code here
	    
	    int row= grid.size();
	    int col= grid[0].size();
	    int word_size= word.length();
	    vector<vector<int>> ans;
	    vector<int> temp;
	    // change in row 
	    // right, left, down,up, right-up,left-up, left-down,right-down
	    int x[]={1,-1,0,0,1,-1,-1,1};
	    // channge in col
	    int y[]={0,0,1,-1,-1,-1,1,1};
	    for(int i=0;i<row;i++)
	    {
	        for(int j=0;j<col;j++)
	        {
	            if(grid[i][j]==word[0])
	            {
	                for(int dir=0;dir<8;dir++)
	                {
        	   	            if(solver(word,word_size,i+y[dir],j+x[dir], grid,row-1,col-1,1,y[dir],x[dir])){
        	                temp.push_back(i);
        	                temp.push_back(j);
        	                ans.push_back(temp);
        	                break;
        	            }
	                    
	                }
	            }
	            temp.clear();

	        }
	    }

	    return ans;
	}
};
