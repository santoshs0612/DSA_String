Given a string 's'. The task is to find the smallest window length that contains all the characters of the given string at least one time.
For eg. A = aabcbcdbca, then the result would be 4 as of the smallest window will be dbca.

 

Example 1:

Input : "AABBBCBBAC"
Output : 3
Explanation : Sub-string -> "BAC"
Example 2:
Input : "aaab"
Output : 2
Explanation : Sub-string -> "ab"
 
Example 3:
Input : "GEEKSGEEKSFOR"
Output : 8
Explanation : Sub-string -> "GEEKSFOR"



class Solution{
    public:
    int findSubString(string str)
    {
        // Your code goes here   
        
        unordered_map<int,int> mp;
        unordered_map<int,int> mp2;
        
        for(int i=0;i<str.length();i++)
        {
            mp[str[i]]++;
        }
        int k= mp.size();
        int i=0,j=0,n=str.length();
        int ans=n;
        while(j<n)
        {
            mp2[str[j]]++;
            if(mp2.size()<k)
            {
                j++;
            }
            else if(mp2.size()==k)
            {
                while(mp2.size()==k)
                {
                    ans=min(ans,j-i+1);
                    mp2[str[i]]--;
                    if(mp2[str[i]]==0)
                    {
                        mp2.erase(str[i]);
                    }
                    i++;
                }

                j++;
            }
            
        }
        return ans;
    }
};
