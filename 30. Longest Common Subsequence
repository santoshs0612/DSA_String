
Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.

Example 1:

Input:
A = 6, B = 6
str1 = ABCDGH
str2 = AEDFHR
Output: 3
Explanation: LCS for input Sequences
“ABCDGH” and “AEDFHR” is “ADH” of
length 3.
Example 2:

Input:
A = 3, B = 2
str1 = ABC
str2 = AC
Output: 2
Explanation: LCS of "ABC" and "AC" is
"AC" of length 2.

// function to find longest common subsequence

class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int solver_Rec(string s1,string s2,int m,int n)
    {
        if(n==0|| m==0)
        {
            return 0;
        }
        
        if(s1[m-1]==s2[n-1])
        {
            return 1+solver_Rec(s1,s2,m-1,n-1);
        }
        else
        {
            return max(solver_Rec(s1,s2,m-1,n),solver_Rec(s1,s2,m,n-1));
        }
    }
    int solver_Mem(string s1,string s2,int m,int n,vector<vector<int>> &dp)
    {
        if(n==0|| m==0)
        {
            return 0;
        }
        
        if(dp[m][n]!=-1)
        {
            return dp[m][n];
        }
        if(s1[m-1]==s2[n-1])
        {
            return dp[m][n]= 1+solver_Mem(s1,s2,m-1,n-1,dp);
        }
        else
        {
            return dp[m][n]=max(solver_Mem(s1,s2,m-1,n,dp),solver_Mem(s1,s2,m,n-1,dp));
        }
    }
    int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        
        /////////////////
        // Recursive 
        ////////////////
        
       // return solver_Rec(s1,s2,x,y);
       
       
       /////////////////
       // Memorization 
       ////////////////
       
    //   vector<vector<int>> dp(x+1,vector<int>(y+1,-1));
       
    //   return solver_Mem(s1,s2,x,y,dp);
    
       
       ////////////////
       // TOP Down 
       ////////////////
       
       
       vector<vector<int>> dp(x+1,vector<int>(y+1));
       
       // initialization 
       
       for(int i=0;i<x+1;i++)
       {
           for(int j=0;j<y+1;j++)
           {
               if(i==0)
               {
                   dp[i][j]=0;
               }
               if(j==0)
               {
                   dp[i][j]=0;
               }
           }
       }
       
       
       for(int i=1;i<x+1;i++)
       {
           for(int j=0;j<y+1;j++)
           {
               
               if(s1[i-1]==s2[j])
               {
                   dp[i][j]= 1+dp[i-1][j-1];
               }
               else 
               {
                   dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
               }
           }
       }
       return dp[x][y];
       
        

        
    }
};
