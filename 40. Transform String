Challenge!  

Given two strings A and B. Find the minimum number of steps required to transform string A into string B. The only allowed operation for the transformation is selecting a character from string A and inserting it in the beginning of string A.

Example 1:

Input:
A = "abd"
B = "bad"
Output: 1
Explanation: The conversion can take place in
1 operation: Pick 'b' and place it at the front.
Example 2:

Input:
A = "GeeksForGeeks"
B = "ForGeeksGeeks"
Output: 3
Explanation: The conversion can take
place in 3 operations:
Pick 'r' and place it at the front.
A = "rGeeksFoGeeks"
Pick 'o' and place it at the front.
A = "orGeeksFGeeks"
Pick 'F' and place it at the front.
A = "ForGeeksGeeks"


class Solution
{
    public:
    int transform (string A, string B)
    {
        //code here.
        /// This solution falis for some test cases 
        
        
        // int stringAcount=0,stringBcount=0;
        // int n= A.length(),m=B.length();
        // if(n!=m)
        // {
        //     return -1;
        // }
        // for(int i=0;i<n;i++)
        // {
        //     stringAcount+=A[i];
        // }
        // for(int i=0;i<m;i++)
        // {
        //     stringBcount+=B[i];
        // }
        // if(stringAcount!=stringBcount)
        // {
        //     return -1;
        // }
        // int i=n-1,j=m-1,ans=0;
        
        // while(i>=0)
        // {
        //     if(A[i]!=B[j])
        //     {
        //         i--;
        //         ans++;
        //     }
        //     else{
        //         i--;
        //         j--;
        //     }
            
        // }
        // return ans;



        vector<int> count(256,0);
        int n= A.length(),m=B.length();
        if(n!=m)
        {
            return -1;
        }
        for(int i=0;i<n;i++)
        {
            count[A[i]]++;
            count[B[i]]--;
        }
        for(int i=0;i<256;i++)
        {
            if(count[i]!=0)
            {
                return -1;
            }
        }

        int i=n-1,j=m-1,ans=0;
        
        while(i>=0)
        {
            if(A[i]!=B[j])
            {
                i--;
                ans++;
            }
            else{
                i--;
                j--;
            }
            
        }
        return ans;
    }
};
